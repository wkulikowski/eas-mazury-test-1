// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Registered extends ethereum.Event {
  get params(): Registered__Params {
    return new Registered__Params(this);
  }
}

export class Registered__Params {
  _event: Registered;

  constructor(event: Registered) {
    this._event = event;
  }

  get uuid(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get schema(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get resolver(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get attester(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class ASRegistry__getASResultValue0Struct extends ethereum.Tuple {
  get uuid(): Bytes {
    return this[0].toBytes();
  }

  get resolver(): Address {
    return this[1].toAddress();
  }

  get index(): BigInt {
    return this[2].toBigInt();
  }

  get schema(): Bytes {
    return this[3].toBytes();
  }
}

export class ASRegistry extends ethereum.SmartContract {
  static bind(address: Address): ASRegistry {
    return new ASRegistry("ASRegistry", address);
  }

  VERSION(): string {
    let result = super.call("VERSION", "VERSION():(string)", []);

    return result[0].toString();
  }

  try_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall("VERSION", "VERSION():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getAS(uuid: Bytes): ASRegistry__getASResultValue0Struct {
    let result = super.call(
      "getAS",
      "getAS(bytes32):((bytes32,address,uint256,bytes))",
      [ethereum.Value.fromFixedBytes(uuid)]
    );

    return result[0].toTuple() as ASRegistry__getASResultValue0Struct;
  }

  try_getAS(
    uuid: Bytes
  ): ethereum.CallResult<ASRegistry__getASResultValue0Struct> {
    let result = super.tryCall(
      "getAS",
      "getAS(bytes32):((bytes32,address,uint256,bytes))",
      [ethereum.Value.fromFixedBytes(uuid)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as ASRegistry__getASResultValue0Struct
    );
  }

  getASCount(): BigInt {
    let result = super.call("getASCount", "getASCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getASCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getASCount", "getASCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  register(schema: Bytes, resolver: Address): Bytes {
    let result = super.call("register", "register(bytes,address):(bytes32)", [
      ethereum.Value.fromBytes(schema),
      ethereum.Value.fromAddress(resolver)
    ]);

    return result[0].toBytes();
  }

  try_register(schema: Bytes, resolver: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "register",
      "register(bytes,address):(bytes32)",
      [ethereum.Value.fromBytes(schema), ethereum.Value.fromAddress(resolver)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class RegisterCall extends ethereum.Call {
  get inputs(): RegisterCall__Inputs {
    return new RegisterCall__Inputs(this);
  }

  get outputs(): RegisterCall__Outputs {
    return new RegisterCall__Outputs(this);
  }
}

export class RegisterCall__Inputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get schema(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get resolver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RegisterCall__Outputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}
